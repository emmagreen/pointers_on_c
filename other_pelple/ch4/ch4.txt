1.C不具有布尔类型，测试值都是用整型表达式来代替。零为假，非零为真。
2.break语句用于永久终止循环，continue语句用于终止当前的那次循环。
  当continue语句和break语句出现在嵌套循环的内部的时候，只对最内层
  的循环有用，无法影响外层的循环。
3.如果执行continue语句，则循环中的剩余部分不执行，开始下一轮循环。
  while( (ch = getchar()) != EOF)                while( (ch = getchar()) != EOF )
  {                                              {
    if(ch < '0' || ch > '9')                         if( ch < '0' || ch > '9')
      continue;                                      {
    {                                                     statement
      statement                                      }
    }                                            }
  }

  以上两种方式等价
4.while( scanf("%f", &value ) == 1)                     while( scanf("%f", &value) == 1 && value >= 0)
  {                                                     {          }
    if( value < 0) break;
  }
  以上两种方式等价
5.while语句执行过程，如图。
6.for语句执行过程，如图。
7.do语句执行过程，如图。
8.switch语句执行时贯穿所有case标签，要想避免这种行为，必须在每个case
语句面添加一条break语句，default子句用于捕捉表达式的值与所有case标签
的值不匹配的情况。
巧用switch语句的情况：考虑一个程序，它计算程序的输入中字符，单词和行的
个数。每个字符必须计算，但空格和制表符同时也作为单词的终止符使用，所有在
数到他们的时候，字符计数器和单词计数器都必须加1，另外还有换行符，这是行
的终止符，同时，也是单词的终止符，当出现换行符的时候，三个计数器的值必须
都加1。
switch( ch )
{
  case '\n':   line++;
  case ' ':
  case '\t':   words++;
  default:    chars++;
}
注意：以上switch中没有break语句。
9.goto语句通常用于跳出多层循环。这种情况下，代替沟通语句的有两种方式，
第一种方式实在每一层的while语句中添加一个用于检测状态标志的表达式，在
最内层循环中适当的改变该状态标志，另一种方式通过在将这个多层循环放到一
个函数中，在最内层循环中使用return语句。
10.空语句只包含一个;,本身并不执行任何任务。
